{"ast":null,"code":"var _jsxFileName = \"/Users/mo.almubarak/GitRepos/medigem/client/src/context/ChatContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// client/src/context/ChatContext.js\nimport React, { createContext, useContext, useReducer, useCallback } from 'react';\n\n// Initial state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  messages: [{\n    id: 1,\n    text: \"Hi! I'm MediGem. Ask me about any OTC medication's side effects.\",\n    sender: 'bot',\n    timestamp: new Date()\n  }]\n};\n\n// Action types\nconst ADD_MESSAGE = 'ADD_MESSAGE';\nconst CLEAR_MESSAGES = 'CLEAR_MESSAGES';\n\n// Reducer function\nconst chatReducer = (state, action) => {\n  switch (action.type) {\n    case ADD_MESSAGE:\n      return {\n        ...state,\n        messages: [...state.messages, action.payload]\n      };\n    case CLEAR_MESSAGES:\n      return {\n        ...state,\n        messages: [initialState.messages[0]] // Keep the welcome message\n      };\n    default:\n      return state;\n  }\n};\n\n// Create context\nconst ChatContext = /*#__PURE__*/createContext();\n\n// Context provider component\nexport const ChatProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(chatReducer, initialState);\n\n  // Action to add a message\n  const addMessage = useCallback(message => {\n    const newMessage = {\n      id: Date.now(),\n      timestamp: new Date(),\n      ...message\n    };\n    dispatch({\n      type: ADD_MESSAGE,\n      payload: newMessage\n    });\n  }, []);\n\n  // Action to clear all messages\n  const clearMessages = useCallback(() => {\n    dispatch({\n      type: CLEAR_MESSAGES\n    });\n  }, []);\n\n  // Context value\n  const value = {\n    messages: state.messages,\n    addMessage,\n    clearMessages\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the chat context\n_s(ChatProvider, \"2+EqZ3BCIKFP0q1veVdberZiLg8=\");\n_c = ChatProvider;\nexport const useChat = () => {\n  _s2();\n  const context = useContext(ChatContext);\n  if (context === undefined) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};\n_s2(useChat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useCallback","jsxDEV","_jsxDEV","initialState","messages","id","text","sender","timestamp","Date","ADD_MESSAGE","CLEAR_MESSAGES","chatReducer","state","action","type","payload","ChatContext","ChatProvider","children","_s","dispatch","addMessage","message","newMessage","now","clearMessages","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useChat","_s2","context","undefined","Error","$RefreshReg$"],"sources":["/Users/mo.almubarak/GitRepos/medigem/client/src/context/ChatContext.js"],"sourcesContent":["// client/src/context/ChatContext.js\nimport React, { createContext, useContext, useReducer, useCallback } from 'react';\n\n// Initial state\nconst initialState = {\n  messages: [\n    { \n      id: 1, \n      text: \"Hi! I'm MediGem. Ask me about any OTC medication's side effects.\", \n      sender: 'bot',\n      timestamp: new Date() \n    }\n  ],\n};\n\n// Action types\nconst ADD_MESSAGE = 'ADD_MESSAGE';\nconst CLEAR_MESSAGES = 'CLEAR_MESSAGES';\n\n// Reducer function\nconst chatReducer = (state, action) => {\n  switch (action.type) {\n    case ADD_MESSAGE:\n      return {\n        ...state,\n        messages: [...state.messages, action.payload],\n      };\n    case CLEAR_MESSAGES:\n      return {\n        ...state,\n        messages: [initialState.messages[0]], // Keep the welcome message\n      };\n    default:\n      return state;\n  }\n};\n\n// Create context\nconst ChatContext = createContext();\n\n// Context provider component\nexport const ChatProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(chatReducer, initialState);\n\n  // Action to add a message\n  const addMessage = useCallback((message) => {\n    const newMessage = {\n      id: Date.now(),\n      timestamp: new Date(),\n      ...message,\n    };\n    dispatch({ type: ADD_MESSAGE, payload: newMessage });\n  }, []);\n\n  // Action to clear all messages\n  const clearMessages = useCallback(() => {\n    dispatch({ type: CLEAR_MESSAGES });\n  }, []);\n\n  // Context value\n  const value = {\n    messages: state.messages,\n    addMessage,\n    clearMessages,\n  };\n\n  return (\n    <ChatContext.Provider value={value}>\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\n// Custom hook to use the chat context\nexport const useChat = () => {\n  const context = useContext(ChatContext);\n  if (context === undefined) {\n    throw new Error('useChat must be used within a ChatProvider');\n  }\n  return context;\n};"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,WAAW,QAAQ,OAAO;;AAEjF;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAG;EACnBC,QAAQ,EAAE,CACR;IACEC,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,kEAAkE;IACxEC,MAAM,EAAE,KAAK;IACbC,SAAS,EAAE,IAAIC,IAAI,CAAC;EACtB,CAAC;AAEL,CAAC;;AAED;AACA,MAAMC,WAAW,GAAG,aAAa;AACjC,MAAMC,cAAc,GAAG,gBAAgB;;AAEvC;AACA,MAAMC,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACrC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKL,WAAW;MACd,OAAO;QACL,GAAGG,KAAK;QACRT,QAAQ,EAAE,CAAC,GAAGS,KAAK,CAACT,QAAQ,EAAEU,MAAM,CAACE,OAAO;MAC9C,CAAC;IACH,KAAKL,cAAc;MACjB,OAAO;QACL,GAAGE,KAAK;QACRT,QAAQ,EAAE,CAACD,YAAY,CAACC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAE;MACxC,CAAC;IACH;MACE,OAAOS,KAAK;EAChB;AACF,CAAC;;AAED;AACA,MAAMI,WAAW,gBAAGpB,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAMqB,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACP,KAAK,EAAEQ,QAAQ,CAAC,GAAGtB,UAAU,CAACa,WAAW,EAAET,YAAY,CAAC;;EAE/D;EACA,MAAMmB,UAAU,GAAGtB,WAAW,CAAEuB,OAAO,IAAK;IAC1C,MAAMC,UAAU,GAAG;MACjBnB,EAAE,EAAEI,IAAI,CAACgB,GAAG,CAAC,CAAC;MACdjB,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC;MACrB,GAAGc;IACL,CAAC;IACDF,QAAQ,CAAC;MAAEN,IAAI,EAAEL,WAAW;MAAEM,OAAO,EAAEQ;IAAW,CAAC,CAAC;EACtD,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAME,aAAa,GAAG1B,WAAW,CAAC,MAAM;IACtCqB,QAAQ,CAAC;MAAEN,IAAI,EAAEJ;IAAe,CAAC,CAAC;EACpC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMgB,KAAK,GAAG;IACZvB,QAAQ,EAAES,KAAK,CAACT,QAAQ;IACxBkB,UAAU;IACVI;EACF,CAAC;EAED,oBACExB,OAAA,CAACe,WAAW,CAACW,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAR,QAAA,EAChCA;EAAQ;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAAZ,EAAA,CAhCaF,YAAY;AAAAe,EAAA,GAAZf,YAAY;AAiCzB,OAAO,MAAMgB,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,MAAMC,OAAO,GAAGtC,UAAU,CAACmB,WAAW,CAAC;EACvC,IAAImB,OAAO,KAAKC,SAAS,EAAE;IACzB,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EACA,OAAOF,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,OAAO;AAAA,IAAAD,EAAA;AAAAM,YAAA,CAAAN,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}