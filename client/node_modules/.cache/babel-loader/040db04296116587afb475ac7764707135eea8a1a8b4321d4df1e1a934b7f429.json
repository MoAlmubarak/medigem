{"ast":null,"code":"var _jsxFileName = \"/Users/mo.almubarak/GitRepos/medigem/client/src/context/MedicationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// client/src/context/MedicationContext.js\nimport React, { createContext, useContext, useReducer, useCallback } from 'react';\nimport { searchDrug } from '../services/api';\n\n// Initial state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  isLoading: false,\n  error: null,\n  currentMedication: null,\n  searchHistory: []\n};\n\n// Action types\nconst SEARCH_START = 'SEARCH_START';\nconst SEARCH_SUCCESS = 'SEARCH_SUCCESS';\nconst SEARCH_ERROR = 'SEARCH_ERROR';\nconst CLEAR_ERROR = 'CLEAR_ERROR';\nconst ADD_TO_HISTORY = 'ADD_TO_HISTORY';\nconst CLEAR_HISTORY = 'CLEAR_HISTORY';\n\n// Reducer function\nconst medicationReducer = (state, action) => {\n  switch (action.type) {\n    case SEARCH_START:\n      return {\n        ...state,\n        isLoading: true,\n        error: null\n      };\n    case SEARCH_SUCCESS:\n      return {\n        ...state,\n        isLoading: false,\n        currentMedication: action.payload,\n        error: null\n      };\n    case SEARCH_ERROR:\n      return {\n        ...state,\n        isLoading: false,\n        error: action.payload\n      };\n    case CLEAR_ERROR:\n      return {\n        ...state,\n        error: null\n      };\n    case ADD_TO_HISTORY:\n      // Avoid duplicates in history\n      if (state.searchHistory.some(item => item.drugName === action.payload.drugName)) {\n        return state;\n      }\n      return {\n        ...state,\n        searchHistory: [action.payload, ...state.searchHistory].slice(0, 10) // Keep only last 10\n      };\n    case CLEAR_HISTORY:\n      return {\n        ...state,\n        searchHistory: []\n      };\n    default:\n      return state;\n  }\n};\n\n// Create context\nconst MedicationContext = /*#__PURE__*/createContext();\n\n// Context provider component\nexport const MedicationProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(medicationReducer, initialState);\n\n  // Load search history from localStorage\n  React.useEffect(() => {\n    try {\n      const savedHistory = localStorage.getItem('medicationSearchHistory');\n      if (savedHistory) {\n        const parsedHistory = JSON.parse(savedHistory);\n        parsedHistory.forEach(item => {\n          dispatch({\n            type: ADD_TO_HISTORY,\n            payload: item\n          });\n        });\n      }\n    } catch (error) {\n      console.error('Error loading search history:', error);\n    }\n  }, []);\n\n  // Save search history to localStorage when it changes\n  React.useEffect(() => {\n    try {\n      localStorage.setItem('medicationSearchHistory', JSON.stringify(state.searchHistory));\n    } catch (error) {\n      console.error('Error saving search history:', error);\n    }\n  }, [state.searchHistory]);\n\n  // Action to search for a medication\n  const searchMedication = useCallback(async drugName => {\n    dispatch({\n      type: SEARCH_START\n    });\n    try {\n      const medicationData = await searchDrug(drugName);\n      dispatch({\n        type: SEARCH_SUCCESS,\n        payload: medicationData\n      });\n      dispatch({\n        type: ADD_TO_HISTORY,\n        payload: {\n          drugName,\n          brandName: medicationData.drugInfo.brandName,\n          genericName: medicationData.drugInfo.genericName,\n          timestamp: new Date()\n        }\n      });\n      return medicationData;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      dispatch({\n        type: SEARCH_ERROR,\n        payload: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to search for medication'\n      });\n      throw error;\n    }\n  }, []);\n\n  // Action to clear the error\n  const clearError = useCallback(() => {\n    dispatch({\n      type: CLEAR_ERROR\n    });\n  }, []);\n\n  // Action to clear search history\n  const clearHistory = useCallback(() => {\n    dispatch({\n      type: CLEAR_HISTORY\n    });\n  }, []);\n\n  // Context value\n  const value = {\n    ...state,\n    searchMedication,\n    clearError,\n    clearHistory\n  };\n  return /*#__PURE__*/_jsxDEV(MedicationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the medication context\n_s(MedicationProvider, \"NyHQbHvuoXd+5h8B/DimrsNAS+Y=\");\n_c = MedicationProvider;\nexport const useMedication = () => {\n  _s2();\n  const context = useContext(MedicationContext);\n  if (context === undefined) {\n    throw new Error('useMedication must be used within a MedicationProvider');\n  }\n  return context;\n};\n_s2(useMedication, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"MedicationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useCallback","searchDrug","jsxDEV","_jsxDEV","initialState","isLoading","error","currentMedication","searchHistory","SEARCH_START","SEARCH_SUCCESS","SEARCH_ERROR","CLEAR_ERROR","ADD_TO_HISTORY","CLEAR_HISTORY","medicationReducer","state","action","type","payload","some","item","drugName","slice","MedicationContext","MedicationProvider","children","_s","dispatch","useEffect","savedHistory","localStorage","getItem","parsedHistory","JSON","parse","forEach","console","setItem","stringify","searchMedication","medicationData","brandName","drugInfo","genericName","timestamp","Date","_error$response","_error$response$data","response","data","message","clearError","clearHistory","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useMedication","_s2","context","undefined","Error","$RefreshReg$"],"sources":["/Users/mo.almubarak/GitRepos/medigem/client/src/context/MedicationContext.js"],"sourcesContent":["// client/src/context/MedicationContext.js\nimport React, { createContext, useContext, useReducer, useCallback } from 'react';\nimport { searchDrug } from '../services/api';\n\n// Initial state\nconst initialState = {\n  isLoading: false,\n  error: null,\n  currentMedication: null,\n  searchHistory: [],\n};\n\n// Action types\nconst SEARCH_START = 'SEARCH_START';\nconst SEARCH_SUCCESS = 'SEARCH_SUCCESS';\nconst SEARCH_ERROR = 'SEARCH_ERROR';\nconst CLEAR_ERROR = 'CLEAR_ERROR';\nconst ADD_TO_HISTORY = 'ADD_TO_HISTORY';\nconst CLEAR_HISTORY = 'CLEAR_HISTORY';\n\n// Reducer function\nconst medicationReducer = (state, action) => {\n  switch (action.type) {\n    case SEARCH_START:\n      return {\n        ...state,\n        isLoading: true,\n        error: null,\n      };\n    case SEARCH_SUCCESS:\n      return {\n        ...state,\n        isLoading: false,\n        currentMedication: action.payload,\n        error: null,\n      };\n    case SEARCH_ERROR:\n      return {\n        ...state,\n        isLoading: false,\n        error: action.payload,\n      };\n    case CLEAR_ERROR:\n      return {\n        ...state,\n        error: null,\n      };\n    case ADD_TO_HISTORY:\n      // Avoid duplicates in history\n      if (state.searchHistory.some(item => item.drugName === action.payload.drugName)) {\n        return state;\n      }\n      return {\n        ...state,\n        searchHistory: [action.payload, ...state.searchHistory].slice(0, 10), // Keep only last 10\n      };\n    case CLEAR_HISTORY:\n      return {\n        ...state,\n        searchHistory: [],\n      };\n    default:\n      return state;\n  }\n};\n\n// Create context\nconst MedicationContext = createContext();\n\n// Context provider component\nexport const MedicationProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(medicationReducer, initialState);\n\n  // Load search history from localStorage\n  React.useEffect(() => {\n    try {\n      const savedHistory = localStorage.getItem('medicationSearchHistory');\n      if (savedHistory) {\n        const parsedHistory = JSON.parse(savedHistory);\n        parsedHistory.forEach(item => {\n          dispatch({ type: ADD_TO_HISTORY, payload: item });\n        });\n      }\n    } catch (error) {\n      console.error('Error loading search history:', error);\n    }\n  }, []);\n\n  // Save search history to localStorage when it changes\n  React.useEffect(() => {\n    try {\n      localStorage.setItem('medicationSearchHistory', JSON.stringify(state.searchHistory));\n    } catch (error) {\n      console.error('Error saving search history:', error);\n    }\n  }, [state.searchHistory]);\n\n  // Action to search for a medication\n  const searchMedication = useCallback(async (drugName) => {\n    dispatch({ type: SEARCH_START });\n    \n    try {\n      const medicationData = await searchDrug(drugName);\n      dispatch({ type: SEARCH_SUCCESS, payload: medicationData });\n      dispatch({ type: ADD_TO_HISTORY, payload: { \n        drugName,\n        brandName: medicationData.drugInfo.brandName,\n        genericName: medicationData.drugInfo.genericName,\n        timestamp: new Date()\n      }});\n      return medicationData;\n    } catch (error) {\n      dispatch({ \n        type: SEARCH_ERROR, \n        payload: error.response?.data?.message || 'Failed to search for medication'\n      });\n      throw error;\n    }\n  }, []);\n\n  // Action to clear the error\n  const clearError = useCallback(() => {\n    dispatch({ type: CLEAR_ERROR });\n  }, []);\n\n  // Action to clear search history\n  const clearHistory = useCallback(() => {\n    dispatch({ type: CLEAR_HISTORY });\n  }, []);\n\n  // Context value\n  const value = {\n    ...state,\n    searchMedication,\n    clearError,\n    clearHistory,\n  };\n\n  return (\n    <MedicationContext.Provider value={value}>\n      {children}\n    </MedicationContext.Provider>\n  );\n};\n\n// Custom hook to use the medication context\nexport const useMedication = () => {\n  const context = useContext(MedicationContext);\n  if (context === undefined) {\n    throw new Error('useMedication must be used within a MedicationProvider');\n  }\n  return context;\n};"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,WAAW,QAAQ,OAAO;AACjF,SAASC,UAAU,QAAQ,iBAAiB;;AAE5C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAG;EACnBC,SAAS,EAAE,KAAK;EAChBC,KAAK,EAAE,IAAI;EACXC,iBAAiB,EAAE,IAAI;EACvBC,aAAa,EAAE;AACjB,CAAC;;AAED;AACA,MAAMC,YAAY,GAAG,cAAc;AACnC,MAAMC,cAAc,GAAG,gBAAgB;AACvC,MAAMC,YAAY,GAAG,cAAc;AACnC,MAAMC,WAAW,GAAG,aAAa;AACjC,MAAMC,cAAc,GAAG,gBAAgB;AACvC,MAAMC,aAAa,GAAG,eAAe;;AAErC;AACA,MAAMC,iBAAiB,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EAC3C,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKT,YAAY;MACf,OAAO;QACL,GAAGO,KAAK;QACRX,SAAS,EAAE,IAAI;QACfC,KAAK,EAAE;MACT,CAAC;IACH,KAAKI,cAAc;MACjB,OAAO;QACL,GAAGM,KAAK;QACRX,SAAS,EAAE,KAAK;QAChBE,iBAAiB,EAAEU,MAAM,CAACE,OAAO;QACjCb,KAAK,EAAE;MACT,CAAC;IACH,KAAKK,YAAY;MACf,OAAO;QACL,GAAGK,KAAK;QACRX,SAAS,EAAE,KAAK;QAChBC,KAAK,EAAEW,MAAM,CAACE;MAChB,CAAC;IACH,KAAKP,WAAW;MACd,OAAO;QACL,GAAGI,KAAK;QACRV,KAAK,EAAE;MACT,CAAC;IACH,KAAKO,cAAc;MACjB;MACA,IAAIG,KAAK,CAACR,aAAa,CAACY,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,QAAQ,KAAKL,MAAM,CAACE,OAAO,CAACG,QAAQ,CAAC,EAAE;QAC/E,OAAON,KAAK;MACd;MACA,OAAO;QACL,GAAGA,KAAK;QACRR,aAAa,EAAE,CAACS,MAAM,CAACE,OAAO,EAAE,GAAGH,KAAK,CAACR,aAAa,CAAC,CAACe,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAE;MACxE,CAAC;IACH,KAAKT,aAAa;MAChB,OAAO;QACL,GAAGE,KAAK;QACRR,aAAa,EAAE;MACjB,CAAC;IACH;MACE,OAAOQ,KAAK;EAChB;AACF,CAAC;;AAED;AACA,MAAMQ,iBAAiB,gBAAG3B,aAAa,CAAC,CAAC;;AAEzC;AACA,OAAO,MAAM4B,kBAAkB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAClD,MAAM,CAACX,KAAK,EAAEY,QAAQ,CAAC,GAAG7B,UAAU,CAACgB,iBAAiB,EAAEX,YAAY,CAAC;;EAErE;EACAR,KAAK,CAACiC,SAAS,CAAC,MAAM;IACpB,IAAI;MACF,MAAMC,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,yBAAyB,CAAC;MACpE,IAAIF,YAAY,EAAE;QAChB,MAAMG,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACL,YAAY,CAAC;QAC9CG,aAAa,CAACG,OAAO,CAACf,IAAI,IAAI;UAC5BO,QAAQ,CAAC;YAAEV,IAAI,EAAEL,cAAc;YAAEM,OAAO,EAAEE;UAAK,CAAC,CAAC;QACnD,CAAC,CAAC;MACJ;IACF,CAAC,CAAC,OAAOf,KAAK,EAAE;MACd+B,OAAO,CAAC/B,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACvD;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAV,KAAK,CAACiC,SAAS,CAAC,MAAM;IACpB,IAAI;MACFE,YAAY,CAACO,OAAO,CAAC,yBAAyB,EAAEJ,IAAI,CAACK,SAAS,CAACvB,KAAK,CAACR,aAAa,CAAC,CAAC;IACtF,CAAC,CAAC,OAAOF,KAAK,EAAE;MACd+B,OAAO,CAAC/B,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC,EAAE,CAACU,KAAK,CAACR,aAAa,CAAC,CAAC;;EAEzB;EACA,MAAMgC,gBAAgB,GAAGxC,WAAW,CAAC,MAAOsB,QAAQ,IAAK;IACvDM,QAAQ,CAAC;MAAEV,IAAI,EAAET;IAAa,CAAC,CAAC;IAEhC,IAAI;MACF,MAAMgC,cAAc,GAAG,MAAMxC,UAAU,CAACqB,QAAQ,CAAC;MACjDM,QAAQ,CAAC;QAAEV,IAAI,EAAER,cAAc;QAAES,OAAO,EAAEsB;MAAe,CAAC,CAAC;MAC3Db,QAAQ,CAAC;QAAEV,IAAI,EAAEL,cAAc;QAAEM,OAAO,EAAE;UACxCG,QAAQ;UACRoB,SAAS,EAAED,cAAc,CAACE,QAAQ,CAACD,SAAS;UAC5CE,WAAW,EAAEH,cAAc,CAACE,QAAQ,CAACC,WAAW;UAChDC,SAAS,EAAE,IAAIC,IAAI,CAAC;QACtB;MAAC,CAAC,CAAC;MACH,OAAOL,cAAc;IACvB,CAAC,CAAC,OAAOnC,KAAK,EAAE;MAAA,IAAAyC,eAAA,EAAAC,oBAAA;MACdpB,QAAQ,CAAC;QACPV,IAAI,EAAEP,YAAY;QAClBQ,OAAO,EAAE,EAAA4B,eAAA,GAAAzC,KAAK,CAAC2C,QAAQ,cAAAF,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBG,IAAI,cAAAF,oBAAA,uBAApBA,oBAAA,CAAsBG,OAAO,KAAI;MAC5C,CAAC,CAAC;MACF,MAAM7C,KAAK;IACb;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAM8C,UAAU,GAAGpD,WAAW,CAAC,MAAM;IACnC4B,QAAQ,CAAC;MAAEV,IAAI,EAAEN;IAAY,CAAC,CAAC;EACjC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMyC,YAAY,GAAGrD,WAAW,CAAC,MAAM;IACrC4B,QAAQ,CAAC;MAAEV,IAAI,EAAEJ;IAAc,CAAC,CAAC;EACnC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMwC,KAAK,GAAG;IACZ,GAAGtC,KAAK;IACRwB,gBAAgB;IAChBY,UAAU;IACVC;EACF,CAAC;EAED,oBACElD,OAAA,CAACqB,iBAAiB,CAAC+B,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA5B,QAAA,EACtCA;EAAQ;IAAA8B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACiB,CAAC;AAEjC,CAAC;;AAED;AAAAhC,EAAA,CA3EaF,kBAAkB;AAAAmC,EAAA,GAAlBnC,kBAAkB;AA4E/B,OAAO,MAAMoC,aAAa,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACjC,MAAMC,OAAO,GAAGjE,UAAU,CAAC0B,iBAAiB,CAAC;EAC7C,IAAIuC,OAAO,KAAKC,SAAS,EAAE;IACzB,MAAM,IAAIC,KAAK,CAAC,wDAAwD,CAAC;EAC3E;EACA,OAAOF,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,aAAa;AAAA,IAAAD,EAAA;AAAAM,YAAA,CAAAN,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}