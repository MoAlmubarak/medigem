{"ast":null,"code":"var _jsxFileName = \"/Users/mo.almubarak/GitRepos/medigem/client/src/components/ChatInterface.js\",\n  _s = $RefreshSig$();\n// client/src/components/ChatInterface.js\nimport React, { useState, useRef, useEffect } from 'react';\nimport MessageBubble from './MessageBubble';\nimport DrugInput from './DrugInput';\nimport SearchHistory from './SearchHistory';\nimport SideEffectsDisplay from './SideEffectsDisplay';\nimport LoadingIndicator from './LoadingIndicator'; // Import new component\nimport ErrorMessage from './ErrorMessage'; // Import new component\nimport { searchDrug } from '../services/api';\nimport { useSearchHistory } from '../hooks/useSearchHistory';\nimport { getErrorMessage, getSuggestions } from '../utils/errorHandler'; // Import error utilities\nimport '../styles/components/ChatInterface.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    id: 1,\n    text: \"Hi! I'm MediGem. Ask me about any OTC medication's side effects.\",\n    sender: 'bot',\n    timestamp: new Date()\n  }]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const messagesEndRef = useRef(null);\n\n  // Use the custom hook\n  const {\n    searchHistory,\n    addToHistory,\n    clearHistory\n  } = useSearchHistory();\n\n  // Auto-scroll to bottom on new messages\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  const handleDrugSearch = async drugName => {\n    if (!drugName.trim()) return;\n\n    // Reset error state\n    setError(null);\n\n    // Add user message\n    const userMessage = {\n      id: Date.now(),\n      text: drugName,\n      sender: 'user',\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, userMessage]);\n\n    // Show loading state\n    setLoading(true);\n    try {\n      // Call API to get drug information\n      const response = await searchDrug(drugName);\n\n      // Add to search history\n      addToHistory(drugName);\n\n      // Add bot response\n      const botMessage = {\n        id: Date.now() + 1,\n        text: `Here's information about ${response.drugInfo.brandName || drugName}:`,\n        sender: 'bot',\n        timestamp: new Date(),\n        sideEffects: response // Include full data for display\n      };\n      setMessages(prev => [...prev, botMessage]);\n    } catch (error) {\n      // Handle error with improved error handling\n      console.error('Error searching for drug:', error);\n      setError(error);\n      const errorMessage = {\n        id: Date.now() + 1,\n        text: getErrorMessage(error),\n        sender: 'bot',\n        timestamp: new Date(),\n        isError: true // Flag to identify error messages\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle suggestion click\n  const handleSuggestionClick = suggestion => {\n    // If suggestion is in the form \"Try searching for X instead\"\n    // Extract the medication name\n    const match = suggestion.match(/try (?:searching for |the generic name |)['\"]?([^'\"]+)['\"]?(?:\\s+instead)?/i);\n    if (match && match[1]) {\n      handleDrugSearch(match[1]);\n    } else if (suggestion.includes('Ibuprofen') || suggestion.includes('Tylenol')) {\n      // Handle common medication suggestions\n      const med = suggestion.includes('Ibuprofen') ? 'Ibuprofen' : 'Tylenol';\n      handleDrugSearch(med);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(SearchHistory, {\n      history: searchHistory,\n      onSelectItem: handleDrugSearch,\n      onClearHistory: clearHistory\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: [messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(MessageBubble, {\n          message: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this), message.sideEffects && /*#__PURE__*/_jsxDEV(SideEffectsDisplay, {\n          sideEffects: message.sideEffects\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 15\n        }, this), message.isError && /*#__PURE__*/_jsxDEV(ErrorMessage, {\n          error: message.text,\n          suggestions: getSuggestions(error),\n          onSuggestionClick: handleSuggestionClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 15\n        }, this)]\n      }, message.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this)), loading && /*#__PURE__*/_jsxDEV(LoadingIndicator, {\n        text: \"Searching our medication database...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DrugInput, {\n      onSubmit: handleDrugSearch,\n      isLoading: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"3oQ7dAFVXJuBrO7EG6CbQZ0AA9U=\", false, function () {\n  return [useSearchHistory];\n});\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","useRef","useEffect","MessageBubble","DrugInput","SearchHistory","SideEffectsDisplay","LoadingIndicator","ErrorMessage","searchDrug","useSearchHistory","getErrorMessage","getSuggestions","jsxDEV","_jsxDEV","ChatInterface","_s","messages","setMessages","id","text","sender","timestamp","Date","loading","setLoading","error","setError","messagesEndRef","searchHistory","addToHistory","clearHistory","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleDrugSearch","drugName","trim","userMessage","now","prev","response","botMessage","drugInfo","brandName","sideEffects","console","errorMessage","isError","handleSuggestionClick","suggestion","match","includes","med","className","children","history","onSelectItem","onClearHistory","fileName","_jsxFileName","lineNumber","columnNumber","map","message","suggestions","onSuggestionClick","ref","onSubmit","isLoading","_c","$RefreshReg$"],"sources":["/Users/mo.almubarak/GitRepos/medigem/client/src/components/ChatInterface.js"],"sourcesContent":["// client/src/components/ChatInterface.js\nimport React, { useState, useRef, useEffect } from 'react';\nimport MessageBubble from './MessageBubble';\nimport DrugInput from './DrugInput';\nimport SearchHistory from './SearchHistory';\nimport SideEffectsDisplay from './SideEffectsDisplay';\nimport LoadingIndicator from './LoadingIndicator'; // Import new component\nimport ErrorMessage from './ErrorMessage'; // Import new component\nimport { searchDrug } from '../services/api';\nimport { useSearchHistory } from '../hooks/useSearchHistory';\nimport { getErrorMessage, getSuggestions } from '../utils/errorHandler'; // Import error utilities\nimport '../styles/components/ChatInterface.css';\n\nconst ChatInterface = () => {\n  const [messages, setMessages] = useState([\n    { \n      id: 1, \n      text: \"Hi! I'm MediGem. Ask me about any OTC medication's side effects.\", \n      sender: 'bot',\n      timestamp: new Date() \n    }\n  ]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const messagesEndRef = useRef(null);\n  \n  // Use the custom hook\n  const { searchHistory, addToHistory, clearHistory } = useSearchHistory();\n\n  // Auto-scroll to bottom on new messages\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  const handleDrugSearch = async (drugName) => {\n    if (!drugName.trim()) return;\n\n    // Reset error state\n    setError(null);\n\n    // Add user message\n    const userMessage = {\n      id: Date.now(),\n      text: drugName,\n      sender: 'user',\n      timestamp: new Date()\n    };\n    setMessages(prev => [...prev, userMessage]);\n    \n    // Show loading state\n    setLoading(true);\n    \n    try {\n      // Call API to get drug information\n      const response = await searchDrug(drugName);\n      \n      // Add to search history\n      addToHistory(drugName);\n      \n      // Add bot response\n      const botMessage = {\n        id: Date.now() + 1,\n        text: `Here's information about ${response.drugInfo.brandName || drugName}:`,\n        sender: 'bot',\n        timestamp: new Date(),\n        sideEffects: response // Include full data for display\n      };\n      \n      setMessages(prev => [...prev, botMessage]);\n    } catch (error) {\n      // Handle error with improved error handling\n      console.error('Error searching for drug:', error);\n      setError(error);\n      \n      const errorMessage = {\n        id: Date.now() + 1,\n        text: getErrorMessage(error),\n        sender: 'bot',\n        timestamp: new Date(),\n        isError: true // Flag to identify error messages\n      };\n      \n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  // Handle suggestion click\n  const handleSuggestionClick = (suggestion) => {\n    // If suggestion is in the form \"Try searching for X instead\"\n    // Extract the medication name\n    const match = suggestion.match(/try (?:searching for |the generic name |)['\"]?([^'\"]+)['\"]?(?:\\s+instead)?/i);\n    if (match && match[1]) {\n      handleDrugSearch(match[1]);\n    } else if (suggestion.includes('Ibuprofen') || suggestion.includes('Tylenol')) {\n      // Handle common medication suggestions\n      const med = suggestion.includes('Ibuprofen') ? 'Ibuprofen' : 'Tylenol';\n      handleDrugSearch(med);\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      {/* Add search history component */}\n      <SearchHistory \n        history={searchHistory} \n        onSelectItem={handleDrugSearch}\n        onClearHistory={clearHistory}\n      />\n      \n      <div className=\"messages-container\">\n        {messages.map(message => (\n          <div key={message.id}>\n            <MessageBubble message={message} />\n            {message.sideEffects && (\n              <SideEffectsDisplay sideEffects={message.sideEffects} />\n            )}\n            {message.isError && (\n              <ErrorMessage \n                error={message.text}\n                suggestions={getSuggestions(error)}\n                onSuggestionClick={handleSuggestionClick}\n              />\n            )}\n          </div>\n        ))}\n        {loading && (\n          <LoadingIndicator text=\"Searching our medication database...\" />\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n      <DrugInput onSubmit={handleDrugSearch} isLoading={loading} />\n    </div>\n  );\n};\n\nexport default ChatInterface;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}